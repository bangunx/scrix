name: Publish to NPM

on:
  push:
    branches: [ main ]
    paths:
      - 'VERSION'
      - 'package.json'
      - 'install.sh'
      - 'bin/**'
      - 'script/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use VERSION file)'
        required: false
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Check and bump version if needed
      id: version
      run: |
        chmod +x scripts/check-and-bump-version.sh
        chmod +x scripts/update-version.js
        
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "$VERSION" > VERSION
          node scripts/update-version.js
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Using manual version: $VERSION"
        else
          # Check if current version exists on NPM
          CURRENT_VERSION=$(cat VERSION)
          echo "üìã Current version: $CURRENT_VERSION"
          
          if npm view scrix@$CURRENT_VERSION version >/dev/null 2>&1; then
            echo "‚ùå Version $CURRENT_VERSION already exists on NPM"
            # Bump version
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            echo "$NEW_VERSION" > VERSION
            node scripts/update-version.js
            echo "üìà Bumped to version: $NEW_VERSION"
            VERSION="$NEW_VERSION"
          else
            echo "‚úÖ Version $CURRENT_VERSION is available for publishing"
            VERSION="$CURRENT_VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Final version: $VERSION"
        fi
        
    - name: Update package.json version
      run: |
        node scripts/update-version.js
        echo "‚úÖ Updated package.json to version ${{ steps.version.outputs.version }}"
        
    - name: Install dependencies
      run: |
        echo "üì• Installing dependencies..."
        npm install
        
    - name: Run tests
      run: |
        echo "üß™ Running tests..."
        chmod +x test-install.sh
        chmod +x scripts/update-version.js
        chmod +x scripts/bump-version.sh
        # Test version update script
        node scripts/update-version.js
        echo "‚úÖ Version update script works"
        # Test package validation
        npm pack --dry-run
        echo "‚úÖ Package validation successful"
        
        
    - name: Publish to NPM
      run: |
        echo "üöÄ Publishing to NPM..."
        npm publish
        echo "‚úÖ Successfully published version ${{ steps.version.outputs.version }}"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          üöÄ **Scrix v${{ steps.version.outputs.version }}**
          
          ## What's New
          - Automated deployment to NPM
          - Version management via VERSION file
          - Enhanced AI tools collection
          
          ## Installation
          ```bash
          npm install -g scrix
          ```
          
          ## Usage
          ```bash
          scrix
          ```
          
          ## Changes
          - Updated AI tools collection
          - Improved installation process
          - Enhanced error handling
        draft: false
        prerelease: false
        
    - name: Update VERSION file for next release
      if: success()
      run: |
        # Extract version parts
        CURRENT_VERSION="${{ steps.version.outputs.version }}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "$NEW_VERSION" > VERSION
        echo "üìù Updated VERSION file to $NEW_VERSION for next release"
        
        # Always commit the VERSION update for next release
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add VERSION
        git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
        git push
        echo "‚úÖ Updated VERSION file committed and pushed"
